#!/usr/bin/perl
#This routine  mark up the next nearest molecule of an atom range [ido ide] to a value val.
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
  print "\n=== mark_nextnearest - Nearest Neighbor Selection ===\n\n";
  print "PURPOSE:\n";
  print "  Finds and marks the nearest molecule to a range of atoms. Only considers\n";
  print "  molecules with marks smaller than the specified mark value.\n\n";
  print "USAGE:\n";
  print "  mark_nextnearest atom_id_start atom_id_end mark_val [file.pxyz]\n";
  print "  mark_nextnearest 1 25 3 < system.pxyz > marked.pxyz\n\n";
  print "PARAMETERS:\n";
  print "  atom_id_start  - First atom ID in search range (1-based indexing)\n";
  print "  atom_id_end    - Last atom ID in search range (1-based indexing, inclusive)\n";
  print "  mark_val       - Mark value to assign to nearest molecule\n";
  print "  file.pxyz      - Input .pxyz file (optional, reads from stdin if not provided)\n\n";
  print "INPUT:\n";
  print "  - .pxyz format file (via stdin or file argument)\n";
  print "  - Only supports orthorhombic (cubic/rectangular) simulation boxes\n\n";
  print "OUTPUT:\n";
  print "  - Modified .pxyz file written to stdout\n";
  print "  - Information about marked molecule written to stderr\n\n";
  print "DETAILS:\n";
  print "  - Searches for the closest molecule to ANY atom in the specified range\n";
  print "  - Only considers molecules with existing marks < mark_val\n";
  print "  - Marks ALL atoms of the closest molecule with mark_val\n";
  print "  - Uses periodic boundary conditions for distance calculations\n";
  print "  - Uses 1-based indexing for atom IDs\n\n";
  print "EXAMPLES:\n";
  print "  mark_nextnearest 1 25 3 system.pxyz > step1.pxyz   # Find nearest to first molecule\n";
  print "  mark_nextnearest 50 75 2 temp.pxyz > step2.pxyz    # Add to QM buffer region\n\n";
  print "SEE ALSO:\n";
  print "  mark_nextnearest_n  - Mark N nearest molecules iteratively\n\n";
}


$bnk="   ";

$ido=$ARGV[0];shift; #This should be the id of first atom to be searched 
$ide=$ARGV[0];shift; #This is the id of the last atom to be searched
$val=$ARGV[0];shift;

$natm=<>;chomp($natm);
$_=<>;@pbc=split;
($box1,$box2,$box3)=split;
die "only orthorhombic box supported.\n" if @pbc>3;

#read positions
for ($i=0;$i<$natm;$i++)
{
$_=<>;
($nam[$i],$xxx[$i],$yyy[$i],$zzz[$i],$mol[$i],$mar[$i])=split;
}

#loop on every atoms in the selected molecule
$mark=0;$find=0;$rnearst2=0.0;

for ($ido=$ido-1;$ido<$ide;$ido++)
{
  #print STDERR "search from atom $ido.\n";
  $xo=$xxx[$ido];$yo=$yyy[$ido];$zo=$zzz[$ido];
  #print STDERR "origin location:  $xo  $yo  $zo\n";
  
  for ($i=0;$i<$natm;$i++)
  {
   # calculate the distance only when the atom's mark is smaller than $val
    if ( $mar[$i] < $val ) { 
      $find=$find+1;
      $dx=abs($xxx[$i]-$xo); $dx=$box1-$dx if $dx>$box1/2;
      $dy=abs($yyy[$i]-$yo); $dy=$box2-$dy if $dy>$box2/2;
      $dz=abs($zzz[$i]-$zo); $dz=$box3-$dz if $dz>$box3/2;
      $dis2=$dx*$dx+$dy*$dy+$dz*$dz;
      if ($find==1) { 
        $rnearst2=$dis2;
  	$mark=$mol[$i];
      }else{
  	if ($dis2 < $rnearst2) 
        {
  	  $rnearst2=$dis2;
  	  $mark=$mol[$i];
  	}
      }
    }
   }
}
#end main for loop 

#mark the molecule with the name $mark
for ($i=0;$i<$natm;$i++)
{
    if ( $mol[$i] eq $mark ) {
      print STDERR "$mark $nam[$i] \n"; # $xxx[$i] $yyy[$i] $zzz[$i] \n"; 
      $mar[$i]=$val;
     }
}

#output starts here
print $natm."\n";
print $box1.$bnk.$box2.$bnk.$box3."\n";
for ($i=0;$i<$natm;$i++)
{
print $nam[$i].$bnk.$xxx[$i].$bnk.$yyy[$i].$bnk.$zzz[$i].$bnk.$mol[$i].$bnk.$bnk.$mar[$i]."\n";
}

