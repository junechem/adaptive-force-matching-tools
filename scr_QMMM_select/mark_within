#!/usr/bin/perl
# This routine mark within molecules of an atom with index $ido.
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
  print "\n=== mark_within - Single-Atom Distance Selection ===\n\n";
  print "PURPOSE:\n";
  print "  Marks molecules within a specified distance of a reference atom. This is\n";
  print "  the fundamental building block for distance-based molecular selection.\n\n";
  print "USAGE:\n";
  print "  mark_within atom_index rcut mark_val [file.pxyz]\n";
  print "  mark_within 1 5.0 3 < system.pxyz > marked.pxyz\n\n";
  print "PARAMETERS:\n";
  print "  atom_index  - Reference atom number (1-based indexing)\n";
  print "  rcut        - Cutoff distance in Angstroms\n";
  print "  mark_val    - Mark value to assign to molecules within cutoff\n";
  print "  file.pxyz   - Input .pxyz file (optional, reads from stdin if not provided)\n\n";
  print "INPUT:\n";
  print "  - .pxyz format file (via stdin or file argument)\n";
  print "  - Only supports orthorhombic (cubic/rectangular) simulation boxes\n\n";
  print "OUTPUT:\n";
  print "  - Modified .pxyz file written to stdout\n";
  print "  - Reference atom coordinates and cutoff written to stderr\n\n";
  print "DETAILS:\n";
  print "  - Uses 1-based indexing for atom_index (first atom is 1, not 0)\n";
  print "  - Calculates distances using periodic boundary conditions\n";
  print "  - Marks entire molecules (not individual atoms) if ANY atom is within rcut\n";
  print "  - Only increases mark values (mark_val must be higher than existing mark)\n";
  print "  - Distance calculation accounts for periodic boundary wrapping\n\n";
  print "EXAMPLES:\n";
  print "  mark_within 1 3.5 2 system.pxyz > marked.pxyz     # Mark molecules near atom 1\n";
  print "  mark_within 150 8.0 1 temp.pxyz > final.pxyz      # MM region around atom 150\n\n";
}


$bnk="   ";

$ido=$ARGV[0];shift;
$rcu=$ARGV[0];shift;$rc2=$rcu*$rcu;
$val=$ARGV[0];shift;
$ido--;

$natm=<>;chomp($natm);
$_=<>;@pbc=split;
($box1,$box2,$box3)=split;
die "only orthorhombic box supported.\n" if @pbc>3;

for ($i=0;$i<$natm;$i++)
{
$_=<>;
($nam[$i],$xxx[$i],$yyy[$i],$zzz[$i],$mol[$i],$mar[$i])=split;
}

$xo=$xxx[$ido];$yo=$yyy[$ido];$zo=$zzz[$ido];
print STDERR "origin location: $xo  $yo  $zo\n"."rcut is set to $rcu\n";

$molname="crazy__";$markmol=0;
for ($i=0;$i<$natm;$i++)
{
# start new molecule loop
if ($molname ne $mol[$i]) { 

if ($markmol ==1) { 
for ($j=$molf;$j<$moll+1;$j++) {$mar[$j]=$val if $mar[$j]<$val;}
}

$molname = $mol[$i];$molf=$i;$markmol=0; 
}
# end new molecule loop 
$moll=$i;

$dx=abs($xxx[$i]-$xo); $dx=$box1-$dx if $dx>$box1/2;
$dy=abs($yyy[$i]-$yo); $dy=$box2-$dy if $dy>$box2/2;
$dz=abs($zzz[$i]-$zo); $dz=$box3-$dz if $dz>$box3/2;
$dis2=$dx*$dx+$dy*$dy+$dz*$dz;

if ($dis2<$rc2) {$markmol = 1;}
}
#end main for loop 
if ($markmol ==1) { 
for ($j=$molf;$j<$moll+1;$j++) {$mar[$j]=$val if $mar[$j]<$val;}
}
#need to mark the very last molecule

#output starts here
print $natm."\n";
print $box1.$bnk.$box2.$bnk.$box3."\n";
for ($i=0;$i<$natm;$i++)
{
print $nam[$i].$bnk.$xxx[$i].$bnk.$yyy[$i].$bnk.$zzz[$i].$bnk.$mol[$i].$bnk.$mar[$i]."\n";
}

