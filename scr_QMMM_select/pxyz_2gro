#!/usr/bin/perl
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help { 
    print "\n=== pxyz_2gro - PXYZ to GROMACS Format Converter ===\n\n";
    print "PURPOSE:\n";
    print "  Converts .pxyz files back to GROMACS .gro format. Useful for importing\n";
    print "  QM/MM selections back into GROMACS or other MD software.\n\n";
    print "USAGE:\n";
    print "  pxyz_2gro [file.pxyz]\n";
    print "  pxyz_2gro < system.pxyz > output.gro\n\n";
    print "PARAMETERS:\n";
    print "  file.pxyz   - Input .pxyz file (optional, reads from stdin if not provided)\n\n";
    print "INPUT:\n";
    print "  - .pxyz format file (via stdin or file argument)\n\n";
    print "OUTPUT:\n";
    print "  - GROMACS .gro format written to stdout with structure:\n";
    print "    Line 1: 'system' (title)\n";
    print "    Line 2: Number of atoms\n";
    print "    Lines 3+: GROMACS atom records\n";
    print "    Last line: Box dimensions\n\n";
    print "DETAILS:\n";
    print "  - Converts coordinates from Angstrom to nm (multiply by 0.1)\n";
    print "  - Assigns sequential molecule numbers\n";
    print "  - Extracts residue names from molecule identifiers\n";
    print "  - Assigns sequential atom indices\n";
    print "  - Discards mark information (not part of .gro format)\n";
    print "  - Creates standard GROMACS-compatible format\n\n";
    print "EXAMPLES:\n";
    print "  pxyz_2gro qm_selection.pxyz > qm_system.gro      # Convert QM selection\n";
    print "  pxyz_2gro final.pxyz > output.gro               # Convert final system\n\n";
    print "USE CASES:\n";
    print "  - Preparing QM/MM selections for GROMACS\n";
    print "  - Converting back to standard MD formats\n";
    print "  - Creating input for other molecular dynamics packages\n\n";
    print "SEE ALSO:\n";
    print "  gro2pxyz  - Convert GROMACS .gro to .pxyz format\n\n";
}



$bnk="  ";
$_=<>;chomp;$natm=$_;

$_=<>;
($box1,$box2,$box3)=split;
$box1=$box1*0.1;
$box2=$box2*0.1;
$box3=$box3*0.1;

for ($i=0;$i<$natm;$i++)
{
$_=<>;
($nam[$i],$xxx[$i],$yyy[$i],$zzz[$i],$mol[$i],$val[$i])=split;
}

print "system\n";
print $natm."\n";

$molname=$mol[0];
$nmol=1;
$molname =~ /[^0-9]/;
$cont=$`;
$groname=substr $molname,length($cont);

for ($i=0;$i<$natm;$i++)
{
  $idx++;
  if ($mol[$i] ne $molname) {
    $molname=$mol[$i];
    $nmol++;
    $molname =~  /[^0-9]/;
    $cont=$`;
    $groname=substr $molname,length($cont);
  }
  printf ("%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", $nmol,$groname,$nam[$i],$idx,$xxx[$i]*0.1,$yyy[$i]*0.1,$zzz[$i]*0.1);
}

print $box1.$bnk.$box2.$bnk.$box3."\n";
