#!/usr/bin/perl
# This routine makes the selected atom as the centor of simulation box. Only orthorhombic box supported.
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help { 
    print "\n=== pxyz_recenter - System Recentering and Unwrapping ===\n\n";
    print "PURPOSE:\n";
    print "  Centers the simulation box around a specified atom and unwraps molecules\n";
    print "  that are split across periodic boundaries. Essential for proper visualization.\n\n";
    print "USAGE:\n";
    print "  pxyz_recenter center_atom_index [file.pxyz]\n";
    print "  pxyz_recenter 1 < system.pxyz > centered.pxyz\n\n";
    print "PARAMETERS:\n";
    print "  center_atom_index - Atom to use as new origin (1-based indexing)\n";
    print "  file.pxyz         - Input .pxyz file (optional, reads from stdin)\n\n";
    print "INPUT:\n";
    print "  - .pxyz format file (via stdin or file argument)\n";
    print "  - Only supports orthorhombic (cubic/rectangular) simulation boxes\n\n";
    print "OUTPUT:\n";
    print "  - Recentered .pxyz file written to stdout\n";
    print "  - Original center coordinates written to stderr\n\n";
    print "DETAILS:\n";
    print "  - Uses 1-based indexing for center_atom_index (first atom is 1)\n";
    print "  - Translates all coordinates so specified atom is at origin (0,0,0)\n";
    print "  - Applies periodic boundary conditions to keep atoms in simulation box\n";
    print "  - Unwraps molecules split across periodic boundaries\n";
    print "  - Preserves molecular integrity by keeping atoms of same molecule together\n";
    print "  - Critical for proper visualization in VMD or other molecular viewers\n\n";
    print "EXAMPLES:\n";
    print "  pxyz_recenter 1 system.pxyz > centered.pxyz      # Center on first atom\n";
    print "  pxyz_recenter 150 temp.pxyz > final.pxyz         # Center on atom 150\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  Usually the final step after QM/MM selection:\n";
    print "  pxyz_dropoff 0 selected.pxyz | pxyz_sort | pxyz_recenter 1 > final.pxyz\n\n";
}

$bnk="   ";

$ido=$ARGV[0];shift;
$ido--;

$natm=<>;chomp($natm);
$_=<>;@pbc=split;
($box1,$box2,$box3)=split;
die "only orthorhombic box supported.\n" if @pbc>3;

for ($i=0;$i<$natm;$i++)
{
$_=<>;
($nam[$i],$xxx[$i],$yyy[$i],$zzz[$i],$mol[$i],$mar[$i])=split;
}

$xo=$xxx[$ido];$yo=$yyy[$ido];$zo=$zzz[$ido];
print STDERR "origin location: $xo  $yo  $zo\n";

#recenter
for ($i=0;$i<$natm;$i++)
{

  $dx=$xxx[$i]-$xo;
  if ($dx>$box1/2)  { $dx=$dx-$box1; }
  if ($dx<-$box1/2) { $dx=$dx+$box1; }

  $dy=$yyy[$i]-$yo;
  if ($dy>$box2/2)  { $dy=$dy-$box2; }
  if ($dy<-$box2/2) { $dy=$dy+$box2; }

  $dz=$zzz[$i]-$zo;
  if ($dz>$box3/2)  { $dz=$dz-$box3; }
  if ($dz<-$box3/2) { $dz=$dz+$box3; }

  $xxx[$i]=$dx;
  $yyy[$i]=$dy;
  $zzz[$i]=$dz;
}
#end recenter
#unwrap molecule
$molname="crazy__";
for ($i=0;$i<$natm;$i++)
{
  if ($molname ne $mol[$i]){
    if ($i ne 0 ) {
      for ($j=$molf+1;$j<$i;$j++) {
        $dx=$xxx[$j]-$xxx[$molf];
        if ($dx>$box1/2)  { $xxx[$j]=$xxx[$j]-$box1; }
        if ($dx<-$box1/2) { $xxx[$j]=$xxx[$j]+$box1; }

        $dy=$yyy[$j]-$yyy[$molf];
        if ($dy>$box2/2)  { $yyy[$j]=$yyy[$j]-$box2; }
        if ($dy<-$box2/2) { $yyy[$j]=$yyy[$j]+$box2; }

        $dz=$zzz[$j]-$zzz[$molf];
        if ($dz>$box3/2)  { $zzz[$j]=$zzz[$j]-$box3; }
        if ($dz<-$box3/2) { $zzz[$j]=$zzz[$j]+$box3; }
      }    
    }
    $molf=$i  #fist atom of a molecule
  }
  $molname = $mol[$i];
}
#unwarp the last molecule
for ($j=$molf+1;$j<$natm;$j++) {
  $dx=$xxx[$j]-$xxx[$molf];
  if ($dx>$box1/2)  { $xxx[$j]=$xxx[$j]-$box1; }
  if ($dx<-$box1/2) { $xxx[$j]=$xxx[$j]+$box1; }

  $dy=$yyy[$j]-$yyy[$molf];
  if ($dy>$box2/2)  { $yyy[$j]=$yyy[$j]-$box2; }
  if ($dy<-$box2/2) { $yyy[$j]=$yyy[$j]+$box2; }

  $dz=$zzz[$j]-$zzz[$molf];
  if ($dz>$box3/2)  { $zzz[$j]=$zzz[$j]-$box3; }
  if ($dz<-$box3/2) { $zzz[$j]=$zzz[$j]+$box3; }
}
#end unwrap last
#end unwrap

#output starts here
print $natm."\n";
print $box1.$bnk.$box2.$bnk.$box3."\n";
for ($i=0;$i<$natm;$i++)
{
printf ("%4s %15.5f %15.5f %15.5f%8s %3d\n", $nam[$i],$xxx[$i],$yyy[$i],$zzz[$i],$mol[$i],$mar[$i])
}

