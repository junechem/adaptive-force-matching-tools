#!/usr/bin/perl

if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== xyz_fix_lineno - XYZ Header Correction ===\n\n";
    print "PURPOSE:\n";
    print "  Corrects the atom count in XYZ files that have incorrect headers.\n";
    print "  Fixes files where manual editing has made the atom count inaccurate.\n\n";
    print "USAGE:\n";
    print "  xyz_fix_lineno [file.xyz]\n";
    print "  xyz_fix_lineno < broken.xyz > fixed.xyz\n\n";
    print "PARAMETERS:\n";
    print "  file.xyz    - Input XYZ file (optional, reads from stdin if not provided)\n\n";
    print "INPUT:\n";
    print "  - XYZ file with potentially incorrect atom count (via stdin or file argument)\n";
    print "  - Must have existing XYZ format with 2-line header\n\n";
    print "OUTPUT:\n";
    print "  - XYZ file with corrected atom count written to stdout\n";
    print "  - Structure:\n";
    print "    Line 1: Corrected number of atoms (counted from data)\n";
    print "    Line 2: Original comment line (preserved)\n";
    print "    Lines 3+: Original coordinate data\n\n";
    print "DETAILS:\n";
    print "  - Reads existing first line (incorrect atom count) and discards it\n";
    print "  - Preserves original comment line from input\n";
    print "  - Counts actual coordinate lines in the file\n";
    print "  - Outputs corrected atom count as new first line\n";
    print "  - Useful for fixing files that have been manually edited\n\n";
    print "EXAMPLES:\n";
    print "  xyz_fix_lineno edited.xyz > corrected.xyz           # Fix atom count\n";
    print "  xyz_fix_lineno broken.xyz > fixed.xyz              # Repair damaged file\n\n";
    print "USE CASES:\n";
    print "  - Fixing XYZ files after manual atom removal/addition\n";
    print "  - Repairing files with corrupted headers\n";
    print "  - Quality control after coordinate file processing\n\n";
    print "SEE ALSO:\n";
    print "  xyz_add_lineno  - Add headers to headerless files\n";
    print "  xyz_fix_linenu  - Identical functionality (duplicate script)\n\n";
}


$i=0;
$_=<>;
$comment=<>;

while(<>)
{

$i++;
$buf.=$_;

}

print $i."\n";
print "$comment";
print $buf;

