#!/usr/bin/perl
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== off2ff - OFF to FF Force Field Converter ===\n\n";
    print "PURPOSE:\n";
    print "  Convert OFF library files to FF force field files using protocol-driven operations.\n";
    print "  Primary tool for AFMTools force field parameter conversion workflows.\n\n";
    print "USAGE:\n";
    print "  off2ff protocol_file off_file template_ff final_ff\n";
    print "  off2ff proto.copy inter.off template.ff output.ff\n\n";
    print "PARAMETERS:\n";
    print "  protocol_file - Protocol file defining conversion operations\n";
    print "  off_file      - Input OFF library file with force field parameters\n";
    print "  template_ff   - Template FF file (CRYOFF format)\n";
    print "  final_ff      - Output FF file with updated parameters\n\n";
    print "INPUT:\n";
    print "  - Protocol file with conversion commands (copy, populate, charge, condition)\n";
    print "  - OFF file containing Inter-Potential and Molecular-Definition sections\n";
    print "  - Template FF file with proper section structure\n\n";
    print "OUTPUT:\n";
    print "  - Updated FF file with parameters transferred from OFF file\n";
    print "  - Will not overwrite existing output files (safety feature)\n\n";
    print "DETAILS:\n";
    print "  - Protocol-driven conversion supporting multiple operation types:\n";
    print "    * copy: Transfer parameters between specific sections/lines\n";
    print "    * populate: Add entire sections with fit/fix flags\n";
    print "    * charge: Handle charge assignments from files or calculations\n";
    print "    * condition: Conditional parameter selection (dist, val, max, min, chg)\n";
    print "  - Uses temporary files for safe operations (/tmp/tempoff2ff.$$)\n";
    print "  - Prevents accidental output file overwriting\n";
    print "  - Executes specialized scripts for each operation type\n\n";
    print "PROTOCOL FILE FORMAT:\n";
    print "  copy source_section,params dest_section,params\n";
    print "  populate source_section dest_section,fit_flag\n";
    print "  charge specification dest_section,params\n";
    print "  condition criteria action params\n";
    print "  # Comments and blank lines are ignored\n\n";
    print "EXAMPLES:\n";
    print "  off2ff proto.copy inter.off template.ff final.ff\n";
    print "  off2ff conversion.prot parameters.off base.ff updated.ff\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Prepare protocol: Define conversion operations in protocol file\n";
    print "  2. Convert parameters: off2ff protocol.txt input.off template.ff output.ff\n";
    print "  3. Validate output: Check FF file for consistency and completeness\n";
    print "  4. Test simulation: Run short MD simulation to verify parameters\n\n";
    print "SAFETY FEATURES:\n";
    print "  - Will not overwrite existing output files\n";
    print "  - Uses temporary files for all intermediate operations\n";
    print "  - Comprehensive error checking for file access\n";
    print "  - Protocol validation before processing\n\n";
    print "SEE ALSO:\n";
    print "  off2ff_copy        - Copy parameters between sections\n";
    print "  off2ff_charge      - Handle charge operations\n";
    print "  offget_inter       - Extract intermolecular parameters\n";
    print "  offget_intra       - Extract intramolecular parameters\n";
    print "  protocol/          - Example protocol files\n\n";
}


$protfile=$ARGV[0];$inputoff=$ARGV[1];$inpff = $ARGV[2]; $outff = $ARGV[3];
$tmpfile = "/tmp/tempoff2ff.$$"; $tmpfil2 = "/tmp/tempoff2f2.$$";
system ("cp $inpff $tmpfile");
die "no $tmpfile \n" unless ( -e $tmpfile);
die "script will not overwrite existing output\n" if (-e $outff);

open(PRO,$protfile);
while(<PRO>)
{
if ( $_ =~ /^\s*$|#/) {next;}
print "\nProtocol: ";print;
($what)=split;

if($what eq "copy") {
  ($what,$offpam,$ffpam)=split;
  system("off2ff_copy $offpam  $ffpam  $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile");  

} elsif ($what eq "populate") {
  ($what,$offpam,$ffpam)=split;
  system("off2ff_copy $offpam  $ffpam  $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile");

} elsif ($what eq "charge") {
  ($what,$chgpam,$ffpam)=split;
  system("off2ff_charge  $chgpam  $ffpam  $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile");


} elsif ($what eq "condition") {
  ($what,$condition,$action,$offpam,$ffpam)=split;
  @cond=split(',',$condition); #parameter postion in off file
  $keyword=$cond[0];
  if ($keyword eq "dist") {
    print "$action terms from $ffpam : \n";
    system("off2ff_bymindist $condition $action $offpam $ffpam $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile");
  } elsif ($keyword eq "val") {
    @pot=split(',',$ffpam); 
    print "$action terms from $pot[0] :\n";
    system("off2ff_byvalue $condition  $action $offpam $ffpam $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile");
  } elsif ($keyword eq "max") {
    @pot=split(',',$ffpam);
    print "$action the maximum term from $pot[0] :\n";
    system("off2ff_bymaxminpam $condition $action $offpam $ffpam $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile")
  } elsif ($keyword eq "min") {
    @pot=split(',',$ffpam);
    print "$action the minimum term from $pot[0] :\n";
    system("off2ff_bymaxminpam $condition $action $offpam $ffpam $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile")
  } elsif ($keyword eq "chg"){
    ($what,$condition,$action,$chgpam,$ffpam)=split;
    print "$action terms from $ffpam according charge product:\n";
    system("off2ff_bychgprot  $condition $action  $chgpam  $ffpam $inputoff $tmpfile $tmpfil2 ; mv $tmpfil2 $tmpfile")   
  } else { 
    print "No rules for this condition: $ffpam \n";
  }

} else { 
  die  "unkown action: $what.\n";
}

} #end while

system ("mv $tmpfile $outff");

