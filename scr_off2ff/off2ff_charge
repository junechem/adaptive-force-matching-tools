#!/usr/bin/perl

if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== off2ff_charge - Charge Product Updater for Force Fields ===\n\n";
    print "PURPOSE:\n";
    print "  Update charge products in force field files using charges from OFF files.\n";
    print "  Essential for maintaining consistent Coulombic interactions after charge fitting.\n\n";
    print "USAGE:\n";
    print "  off2ff_charge charge_param ff_param input.off input.ff output.ff\n\n";
    print "PARAMETERS:\n";
    print "  charge_param - Charge source: 'file=filename', 'neutral', or OFF section spec\n";
    print "  ff_param     - FF parameter spec: 'SECTION,col#,ln#-#,ln#-#,...'\n";
    print "  input.off    - OFF file containing atomic charges\n";
    print "  input.ff     - Input force field file to update\n";
    print "  output.ff    - Output force field file (must not exist)\n\n";
    print "INPUT:\n";
    print "  - OFF file with atomic charges in specified section\n";
    print "  - Force field file with charge product parameters\n";
    print "  - Optional external charge file for file= option\n\n";
    print "OUTPUT:\n";
    print "  - Updated force field file with new charge products\n";
    print "  - Progress messages showing updated atom pairs\n";
    print "  - Error protection against overwriting existing files\n\n";
    print "DETAILS:\n";
    print "  CHARGE SOURCES:\n";
    print "    - OFF file: Uses offget_charge to extract from specified section\n";
    print "    - External file: 'file=filename' with 'atomname charge' format\n";
    print "    - Neutral: 'neutral' sets all charge products to zero\n\n";
    print "  FORCE FIELD PARAMETER SPECIFICATION:\n";
    print "    - Format: 'SECTION,col#,ln#-#,ln#-#,...'\n";
    print "    - SECTION: Force field section (COU, COULOMB, etc.)\n";
    print "    - col#: Column number containing charge product\n";
    print "    - ln#-#: Line ranges to update (ln1-10, ln5, ln3-7)\n\n";
    print "  UPDATE PROCESS:\n";
    print "    - Extracts atom names from specified FF lines using ffgetpam\n";
    print "    - Calculates charge products (q1 * q2) for atom pairs\n";
    print "    - Updates FF file using ffupdbynum for each line\n";
    print "    - Skips updates if either charge is zero/undefined\n\n";
    print "CHARGE PARAMETER FORMATS:\n";
    print "  OFF section: 'ATOMPOT,col4'  (charges in column 4)\n";
    print "  External file: 'file=/path/to/charges.dat'\n";
    print "  Neutral system: 'neutral'\n\n";
    print "EXAMPLES:\n";
    print "  off2ff_charge 'ATOMPOT,col4' 'COU,col3,ln1-20' sys.off input.ff output.ff\n";
    print "    Updates COU section lines 1-20, column 3 with charge products\n\n";
    print "  off2ff_charge 'file=charges.dat' 'COULOMB,col5,ln1,ln3-10' sys.off in.ff out.ff\n";
    print "    Uses external charge file for specific line updates\n\n";
    print "  off2ff_charge neutral 'COU,col3,ln1-50' sys.off input.ff output.ff\n";
    print "    Sets all charge products to zero for neutral system\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Fit atomic charges using quantum calculations\n";
    print "  2. Update OFF file with new charges\n";
    print "  3. Run off2ff_charge to update FF charge products\n";
    print "  4. Test system with updated force field\n";
    print "  5. Validate energy conservation and electrostatics\n\n";
    print "EXTERNAL CHARGE FILE FORMAT:\n";
    print "  # Comments allowed\n";
    print "  ATOM1  -0.834\n";
    print "  ATOM2   0.417\n";
    print "  ATOM3   0.417\n";
    print "  - Two columns: atom_name charge_value\n";
    print "  - Whitespace separated\n\n";
    print "ERROR CONDITIONS:\n";
    print "  - Dies if output file already exists (no overwrite)\n";
    print "  - Warns if charge product cannot be calculated (zero/undefined charges)\n";
    print "  - Requires valid FF parameter specification with line numbers\n\n";
    print "SEE ALSO:\n";
    print "  offget_charge      - Extract charges from OFF files\n";
    print "  ffgetpam           - Extract atom names from FF parameters\n";
    print "  ffupdbynum         - Update FF parameters by position\n\n";
}

$chgpam=$ARGV[0];shift;$ffpam=$ARGV[0];shift;
$inputoff=$ARGV[0];shift;$inpff=$ARGV[0];shift;$outff = $ARGV[0];shift;
$tmpfile = "/tmp/tempoff2ff.$$"; $tmpfil2 = "/tmp/tempoff2f2.$$";
system ("cp $inpff $tmpfile");
die "script will not overwrite existing output\n" if (-e $outff);

#get atom charges
if ( $chgpam =~ /file/i ){
  @off=split /=/,$chgpam; $file=$off[1];
  open(CHGFILE,"<",$file);
  while(<CHGFILE>) {
    ($nam,$charge)=split; $chg{$nam}=$charge;
    $n++; } #get atom charges from a file 
  print "Get ".$n." atom charges from ".$file." file.\n";
} elsif ($chgpam =~ /neu/i){
  $zero=1;
} else {
  @total=`offget_charge $chgpam  $inputoff`;
  for ($j=0;$j<@total;$j++)
  {
    $str=$total[$j];chomp($str); $str =~ s/^\s+|\s+$//g;
    @temp=split /\s+/,$str;
    $nam=$temp[0];$chg{$nam}=$temp[4];
  }
} #end get atom charges from off file

#parameter position in ff file
@ff=split(',',$ffpam);  # parameter position in ff file
$keywordff=$ff[0];
$pamcolff=substr $ff[1],3;
if ( @ff == 2) {
  die "Please provide the line number of charge product in .ff file!\n"; 
} else {
  for ($n=2;$n<@ff;$n++) {
    $ff[$n]= substr $ff[$n],2; @templn=split(/-/,$ff[$n]);
    $templn[1]=$templn[0] unless $templn[1] > $templn[0];
    for ($j=$templn[0];$j<=$templn[1];$j++){ $ln[$idx]=$j; $idx++; } }
} # line number are provided.

print "Update charge product:\n";
for ($i=0;$i<$idx;$i++) {
  $line=$ln[$i];
  $temp=`ffgetpam  $keywordff $line 1 $inpff`;chomp($temp);$nam1=uc($temp) ;#first atom name
  $temp=`ffgetpam  $keywordff $line 2 $inpff`;chomp($temp);$nam2=uc($temp) ; #second atom name
  if ($zero) { 
    $update=1; $chgprod=0; 
    print "Zero charge procduct: $nam1 $nam2 \n"}
  elsif ( $chg{$nam1} == 0 or $chg{$nam2} == 0)  {
    $update=0;
    print "No update for the charge product $nam1~$nam2, one of the chareges is zero or undefined.\n";
  } else { 
    $update=1;$chgprod=$chg{$nam1}*$chg{$nam2};
    print "Update the charge product of $nam1~$nam2: $chg{$nam1}    $chg{$nam2}    $chgprod.\n";
  }
    
  if ($update) {
    system("ffupdbynum $keywordff $line $pamcolff $chgprod $tmpfile > $tmpfil2; mv $tmpfil2 $tmpfile"); }
}
  
system ("mv $tmpfile $outff");
