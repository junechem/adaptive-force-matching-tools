#!/usr/bin/perl
#offget_interpot .off  EXP POW,ln1,ln3-10 STRC,ln1
#03/16/2020: format the output. charge product: f13.10, others: f12.3.

if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== offget_inter - Intermolecular Parameter Extractor ===\n\n";
    print "PURPOSE:\n";
    print "  Extract non-bonded parameters from OFF file Inter-Potential sections.\n";
    print "  Essential for retrieving specific parameter types for force field conversion.\n\n";
    print "USAGE:\n";
    print "  offget_inter file.off\n";
    print "  offget_inter file.off potential_type\n";
    print "  offget_inter file.off potential_type,ln1-10\n";
    print "  offget_inter file.off COU,ln1,ln3,ln5\n\n";
    print "PARAMETERS:\n";
    print "  file.off        - Input OFF file containing Inter-Potential section\n";
    print "  potential_type  - Parameter type (COU, EXP, SRD, POW, STRC, etc.)\n";
    print "  line_specs      - Line numbers or ranges (ln1, ln1-10, ln1,ln3,ln5)\n\n";
    print "INPUT:\n";
    print "  - OFF file with Inter-Potential section\n";
    print "  - Parameters stored with 'Min' termination markers\n";
    print "  - Formatted parameter lines with atom types and values\n\n";
    print "OUTPUT:\n";
    print "  - Formatted parameter lines to stdout\n";
    print "  - COU parameters: 13.10f precision for charge products\n";
    print "  - Other parameters: 12.3f precision\n";
    print "  - Preserves atom type names and parameter ordering\n\n";
    print "DETAILS:\n";
    print "  - Reads Inter-Potential section until 'Min' markers\n";
    print "  - Supports multiple potential types simultaneously\n";
    print "  - Line selection: ln1 (line 1), ln1-10 (range), ln1,ln3,ln5 (specific)\n";
    print "  - Special formatting for charge products in COU parameters\n";
    print "  - Handles mixed string/numeric parameters\n";
    print "  - Error detection for asterisk (*) in fitted parameters\n\n";
    print "PARAMETER TYPES:\n";
    print "  COU  - Coulomb interactions (charge products)\n";
    print "  EXP  - Exponential repulsion\n";
    print "  SRD  - Short-range damping\n";
    print "  POW  - Power law potentials\n";
    print "  STRC - Structure-based potentials\n\n";
    print "EXAMPLES:\n";
    print "  offget_inter system.off                    # All parameters\n";
    print "  offget_inter system.off COU                # All COU parameters\n";
    print "  offget_inter system.off EXP,ln1-20        # EXP lines 1-20\n";
    print "  offget_inter system.off COU,ln1,ln3,ln5   # Specific COU lines\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Extract parameters: offget_inter input.off EXP,ln1-10\n";
    print "  2. Process output: Use in off2ff_copy or other conversion scripts\n";
    print "  3. Validate format: Check parameter ranges and atom types\n\n";
    print "OUTPUT FORMAT:\n";
    print "  ATM1  ATM2     12.345     67.890  EXP    123.456\n";
    print "  ATM3  ATM4  1.2345678901      0.000  COU      0.000\n";
    print "  - Fixed-width formatting for consistent parsing\n";
    print "  - Atom types left-justified in 5-character fields\n\n";
    print "SEE ALSO:\n";
    print "  offget_intra       - Extract intramolecular parameters\n";
    print "  off2ff_copy        - Use extracted parameters in conversions\n";
    print "  offget_charge      - Extract and calculate charges\n\n";
}

$bnk="    ";
 
$filename=$ARGV[0];shift; 
open (FIL,$filename) || die "can not open file $filename"."\n";

while(<FIL>)
{
if (/Inter-Potential/) {
  while(<FIL>) {
    if (/Min/) {
      chomp; 
      $_ =~ s/^\s+|\s+$//g; 
      $_ =~ s/\~|:/ /g;
    # print $_."\n";
      chomp; push @pot, "$_"; } 
      if ($_ =~ /\*/) { die "\nThe fitted parameters contain asterisk(*), please check the .off file!\n\n"; } 
 } } }
$numpot=@pot;

for ($j=0;$j<$numpot;$j++){
  $str=$pot[$j];
  @param=split /\s+/,$str;
  #seperate string and number, eg. STRC1234.5678 and format output
  $ipot[0]=sprintf("%-5s",$param[0]);$ipot[1]=sprintf("%-5s",$param[1]);$type=substr($param[2],0,3);
  $numparam=2;
  for ($i=2;$i<@param-4;$i++) {
      $ipot[$numparam]=sprintf("%12.3f",$param[$i]);
      $ipot[$numparam]=sprintf("%13.10f",$param[$i]) if uc($type) eq "COU";
      $ipot[$numparam]=$param[$i] if $param[$i]=~ /[A-Z]/ and  $param[$i] !~ /E-/ and $param[$i] !~ /E\+/;
      $numparam++;
  }
  for ($i=@param-4;$i<@param;$i++) {
    if ($param[$i] =~ /[a-zA-Z]/ and $param[$i] =~ /[0-9]/ ) {
      $param[$i] =~ /[^A-Z]/;
      $type=$`;
      $val=substr $param[$i],length($type);
      $ipot[$numparam]=$type;$numparam++;
      $ipot[$numparam]=sprintf("%12.6f",$val);$numparam++;
    } else {
      $ipot[$numparam]=sprintf("%12.6f",$param[$i]);
      $ipot[$numparam]=$param[$i] if $param[$i]=~ /[a-zA-Z]/;
      $numparam++;}
  }

  $potential=$ipot[0];
  for ($k=1;$k<$numparam;$k++) { $potential=$potential."  ".$ipot[$k];}
  $pot[$j]=$potential;
  print $pot[$j]."\n" if @ARGV == 0;
}
#print @pot."\n";

# finished reading in all the parameters 

for ($iarg=0;$iarg<@ARGV;$iarg++)
{
#   print $ARGV[$iarg]."\n";
   @getpot=split(',',$ARGV[$iarg]);
   $key=uc($getpot[0]); #off is always uppercase
   $idx=0;
   for ($j=0;$j<$numpot;$j++){
     chomp($pot[$j]);
     @param=split /\s+/,$pot[$j];
     #match line number
     if ($param[2] eq $key){
       $idx++;
       for($k=1;$k<@getpot;$k++){
         $range[$k] = substr $getpot[$k],2; #remove the "ln"  prefix
           @temp=split('-',$range[$k]);
           $temp[1]=$temp[0] unless $temp[1] > $temp[0]; #this trigger if "ln" does not have a range
           if ( $idx >= $temp[0] and $idx <= $temp[1] ){ 
             $buf=$buf.$pot[$j]."\n";
           }          
      } # end of for loop over index or range $k loop

      if ( @getpot == 1) {
             $buf=$buf.$pot[$j]."\n";
      } # no index or range are provided, print all the potentials in this type
    } #end of if (eq $key)
  }
}
print $buf;
