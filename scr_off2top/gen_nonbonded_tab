#!/usr/bin/perl

# gen_nonbonded_tab - Universal non-bonded tabulated potential generator
#
# This script generates tabulated potential files for various non-bonded potential
# types with proper unit conversions for use in molecular dynamics simulations.

if (@ARGV < 6 || $ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
    print_help();
    exit(@ARGV < 6 ? 1 : 0);
}

sub print_help {
    print << 'EOF';

NAME
    gen_nonbonded_tab - Universal non-bonded tabulated potential generator

PURPOSE
    This script generates tabulated potential files (.xvg format) for various
    non-bonded potential types with proper unit conversions. It serves as a
    universal interface to multiple specialized table generators, handling
    parameter conversion and formatting for MD simulation packages.

USAGE
    gen_nonbonded_tab function_type parameters cutoff spacing output.xvg [dispersion]

PARAMETERS
    function_type - Type of potential function (POW, TTP, SRD, EXP, BUC, GEX, STR, COU, THC)
    parameters    - Comma-separated potential parameters
    cutoff        - Maximum distance for table generation (Angstrom)
    spacing       - Distance spacing/resolution (Angstrom)
    output.xvg    - Output table file name
    dispersion    - Optional dispersion correction (C6 for automatic scaling)

INPUT
    • Function type specification
    • Parameter values in OFF format units
    • Grid specifications (cutoff, spacing)
    • Output file name

OUTPUT
    • Tabulated potential file in GROMACS .xvg format
    • Contains distance, potential, and force columns
    • Proper GROMACS header formatting
    • Unit-converted values for simulation compatibility

SUPPORTED POTENTIAL TYPES

    POW - Power-law dispersion: -C6/r^n
    Parameters: C6,n
    Units: C6 (kcal/mol·Å^n), n (dimensionless)
    
    TTP - Tang-Toennies damped dispersion
    Parameters: C6,n,bij
    Units: C6 (kcal/mol·Å^n), n (dimensionless), bij (Å^-1)
    
    SRD - Short-range damped dispersion
    Parameters: C6,n,R0ij
    Units: C6 (kcal/mol·Å^n), n (dimensionless), R0ij (Å)
    
    EXP - Exponential repulsion: A*exp(-B*r)
    Parameters: A,B
    Units: A (kcal/mol), B (Å^-1)
    
    BUC - Buckingham potential: A*exp(-B*r) - C6/r^6
    Parameters: A,C6,B
    Units: A (kcal/mol), C6 (kcal/mol·Å^6), B (Å^-1)
    
    GEX - Generalized exponential: A1*exp(-B*r) + A2*exp(-B*r)^2 + A3*exp(-B*r)^3
    Parameters: A1,A2,A3,B
    Units: A1,A2,A3 (kcal/mol), B (Å^-1)
    
    STR - Structure-based potential: A/r^n with cutoff
    Parameters: A,n,cutoff
    Units: A (kcal/mol·Å^n), n (dimensionless), cutoff (Å)
    
    COUplot - Coulomb potential for plotting: Qij/r
    Parameters: Qij
    Units: Qij (charge product)
    
    COUgmx - Coulomb potential for GROMACS: Qij/r with proper units
    Parameters: Qij
    Units: Qij (charge product)
    
    THC - Three-body correlation potential
    Parameters: Qij,aij
    Units: Qij (charge product), aij (Å^-1)

UNIT CONVERSIONS
    The script automatically performs unit conversions from OFF format to
    MD simulation units:
    
    • Energy: kcal/mol → kJ/mol (factor: 4.184)
    • Distance: Å → nm for length-dependent parameters (factor: 0.1)
    • Force constants: Various scaling based on potential type
    • Dispersion coefficients: Proper power-law scaling

DETAILS
    The script works by:
    1. Parsing input parameters and function type
    2. Applying appropriate unit conversions
    3. Calling specialized gentab_* subscripts
    4. Generating formatted .xvg output
    5. Handling dispersion corrections if specified
    
    Dispersion Correction:
    - When disp="C6", applies automatic C6-based scaling
    - Calculates dispersion=-1/C6 for tail corrections
    - Integrates with long-range correction schemes

EXAMPLES
    gen_nonbonded_tab POW 100.0,6 12.0 0.01 C_H.xvg
        Generate C6/r^6 dispersion table
    
    gen_nonbonded_tab EXP 1000.0,2.5 10.0 0.005 O_H.xvg
        Generate exponential repulsion table
    
    gen_nonbonded_tab BUC 5000.0,100.0,3.0 15.0 0.01 Ar_Ar.xvg C6
        Generate Buckingham potential with C6 dispersion correction
    
    gen_nonbonded_tab COUgmx 0.5 12.0 0.01 Na_Cl.xvg
        Generate Coulomb table for ion pair

INTEGRATION
    Generated tables integrate with:
    • GROMACS: Via energygrp-table mechanism
    • Custom MD codes: Standard .xvg format
    • AFM workflows: Optimized parameter implementation
    • Force field validation: Custom potential testing

DEPENDENCIES
    - gentab_pow_ttp_srd: Power-law and damped dispersion potentials
    - gentab_exp_buck_gexp: Exponential and Buckingham potentials  
    - gentab_strc: Structure-based potentials
    - gentab_cou: Coulomb potentials
    - gentab_thc: Three-body correlation potentials

SAFETY FEATURES
    - Output file overwrite protection
    - Parameter validation and unit checking
    - Error messages for unsupported potential types
    - Progress reporting during table generation

EOF
}

$bnk=",";
$funct=$ARGV[0];shift;$pam=$ARGV[0];shift;
$cutoff=$ARGV[0];shift;$delr=$ARGV[0];shift;
$tabname=$ARGV[0];shift;$disp=$ARGV[0];shift;
die "script will not overwrite existing output\n" if (-e $tabname);

@param=split(/,/,$pam);
if($funct =~ /POW/i) {
  $nth=$param[1]; $C6=$param[0]*0.1**abs($nth)*4.184; $disp=-1/$C6 if uc($disp) eq "C6";
  $pam=$C6.",".$nth;
  $cmd="gentab_pow_ttp_srd POW $pam  $cutoff  $delr  $disp > $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /TTP/i) {
  $nth=$param[1];$C6=$param[0]*0.1**abs($nth)*4.184; $bij=10*$param[2]; $disp=-1/$C6 if uc($disp) eq "C6";
  $pam=$C6.",".$nth.",".$bij;
  $cmd="gentab_pow_ttp_srd TTP $pam  $cutoff  $delr  $disp > $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /SRD/i) {
  $nth=$param[1];$C6=$param[0]*0.1**abs($nth)*4.184; $R0ij=0.1*$param[2]; $disp=-1/$C6 if uc($disp) eq "C6";
  $pam=$C6.",".$nth.",".$R0ij;
  $cmd="gentab_pow_ttp_srd SRD  $pam  $cutoff  $delr  $disp > $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /EXP/i) {
  $A=$param[0]*4.184; $B=$param[1]*10;
  $pam=$A.$bnk.$B;
  $cmd="gentab_exp_buck_gexp EXP  $pam  $cutoff  $delr > $tabname ";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /BUC/i) {
  $A=$param[0]*4.184; $C6=$param[1]*0.1**6*4.184; $B=$param[2]*10; $disp=-1/$C6 if uc($disp) eq "C6";
  $pam=$A.$bnk.$C6.$bnk.$B;
  $cmd="gentab_exp_buck_gexp BUCK  $pam  $cutoff  $delr $disp> $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /GEX/i) {
  $A1=$param[0]*4.184; $A2=$param[1]*41.84; $A3=$param[2]*418.4; $B=$param[3]*10;
  $pam=$A1.$bnk.$A2.$bnk.$A3.$bnk.$B;
  $cmd="gentab_exp_buck_gexp GEX  $pam  $cutoff  $delr > $tabname ";
  print $cmd."\n"; system($cmd);


} elsif ($funct =~ /STR/i) {
  $nth=$param[1];$A=$param[0]*0.1**abs($nth)*4.184; $cut=$param[2]*0.1;
  $pam=$A.$bnk.$nth.$bnk.$cut;
  $cmd="gentab_strc STRC  $pam  $cutoff  $delr > $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /COUplot/i) {
  $Qij=$param[0];
  $cmd="gentab_cou COUplot  $pam  $cutoff  $delr > $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /COUgmx/i) {
  $Qij=$param[0];
  $cmd="gentab_cou COUgmx  $pam  $cutoff  $delr > $tabname";
  print $cmd."\n"; system($cmd);

} elsif ($funct =~ /THC/i) {
  $Qij=$param[0];
  $aij=$param[1]*1000;
  $pam=$Qij.",".$aij;
  $cmd="gentab_thc THC  $pam  $cutoff  $delr > $tabname";
  print $cmd."\n"; system($cmd);

} else { 
  die  "No executable file for [$funct], please get it first and then endit [gen_nonbonded_tab] routine.\n";
}

