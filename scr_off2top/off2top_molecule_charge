#!/usr/bin/perl

# off2top_molecule_charge - Transfer molecular charges from OFF to topology files
#
# This script updates charge assignments in molecule definitions within topology
# files using charge data from OFF files or external charge files.

if (@ARGV < 6 || $ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
    print_help();
    exit(@ARGV < 6 ? 1 : 0);
}

sub print_help {
    print << 'EOF';

NAME
    off2top_molecule_charge - Transfer molecular charges from OFF to topology files

PURPOSE
    This script updates charge assignments in molecule definitions within topology
    files using charge data extracted from OFF files or read from external charge
    files. It handles atom type mapping and unit conversions for proper charge
    assignment in molecular dynamics simulations.

USAGE
    off2top_molecule_charge OFF_source TOP_destination unit_conversion patterns input.off template.top output.top

PARAMETERS
    OFF_source      - Source specification for charges in OFF file
                     Format: COU,atm1,divisor,line_specs OR file=filename
    TOP_destination - Target specification in topology file
                     Format: molecule_name,section,column,line_ranges
    unit_conversion - Unit conversion factor (typically 1.0 for charges)
    patterns        - Processing patterns (default, type=atmtype, etc.)
    input.off       - Input OFF file containing charge data
    template.top    - Input topology file to update
    output.top      - Output topology file with updated charges

INPUT
    • OFF file: Contains COU section with charge products for calculation
      OR external charge file with atom_type charge format
    
    • Topology file: GROMACS topology with molecule definitions containing
      [atoms] sections where charges will be updated

OUTPUT
    • Updated topology file with new charge assignments
    • Progress messages showing charge updates for each atom
    • Preserves all other topology file structure and formatting

CHARGE SOURCE FORMATS

    FROM OFF FILE:
    COU,atm1,divisor,line_specifications
    - COU: Coulomb section identifier
    - atm1/atm2: Use first or second atom type from charge products
    - divisor: Value to divide charge products by
    - line_specs: Lines to process (ln1,ln3,ln5 or ln1-10)
    
    FROM EXTERNAL FILE:
    file=filename
    - filename: External file with format "atom_type charge"
    - One atom type and charge per line
    - Charges in simulation units

TOPOLOGY DESTINATION FORMAT
    molecule_name,section,column,line_ranges
    - molecule_name: Name of molecule in topology (e.g., ALA7, SOL)
    - section: Molecule section to update (typically "atoms")
    - column: Column number for charges (typically col7)
    - line_ranges: Lines to update (ln1-73, ln1,ln5,ln10)

PATTERNS
    • default: Standard processing with direct atom type matching
    • type=atmtype: Use atom type mapping from external file
      - Requires mapping file with format: top_type off_type
      - Enables translation between different naming conventions
    • no: Use atom types exactly as in OFF file

DETAILS
    The script works by:
    1. Extracting charges from OFF file using offget_charge or reading from file
    2. Building charge lookup table indexed by atom type
    3. Processing atom type mappings if specified
    4. Reading current topology structure using topget_param_moldef
    5. Updating charges using topupd_moldef for each specified line
    6. Applying unit conversion factors
    7. Preserving all other topology information
    
    Charge Calculation:
    - For OFF sources: Uses offget_charge to calculate individual charges
    - For file sources: Reads charges directly
    - Applies unit conversion: final_charge = source_charge * unit_conversion

EXAMPLES
    off2top_molecule_charge "COU,atm1,0.6645,ln1-40" "ALA7,atoms,col7,ln1-73" 1.0 default system.off template.top output.top
        Extract charges from COU section, update ALA7 molecule
    
    off2top_molecule_charge "file=charges.dat" "SOL,atoms,col7,ln1-3" 1.0 type=atmtype system.off template.top output.top
        Read charges from file, use atom type mapping
    
    off2top_molecule_charge "COU,atm2,1.0,ln5,ln10,ln15" "MOL,atoms,col7,ln1-20" 1.0 default system.off template.top output.top
        Use second atom from charge products, specific lines

INTEGRATION
    This script integrates with AFM topology conversion workflows:
    • Called by off2top with mol.charge operations
    • Works with offget_charge for parameter extraction
    • Uses topget_param_moldef and topupd_moldef for topology manipulation
    • Supports both file-based and calculated charge assignments

ATOM TYPE MAPPING
    When using type=atmtype pattern:
    • Requires external mapping file
    • Format: topology_atom_type off_atom_type
    • Enables different naming conventions between OFF and topology files
    • Charges are transferred based on mapped atom types

UNIT CONVERSIONS
    • Charges are typically dimensionless (unit_conversion = 1.0)
    • Conversion factor allows scaling if needed
    • Final charge = source_charge * unit_conversion
    • Applied to all charge assignments uniformly

SAFETY FEATURES
    - Temporary file usage prevents input file corruption
    - Output overwrite protection
    - Progress reporting for each charge update
    - Preserves topology file structure and formatting

EOF
}

$offpam=$ARGV[0];$toppam=$ARGV[1];$unitcov=$ARGV[2];$pattern=$ARGV[3];
$inputoff=$ARGV[4];$inptop = $ARGV[5]; $outtop = $ARGV[6];
$tmpfile = "/tmp/temptop.$$"; $tmpfil2 = "/tmp/temptop2.$$";
system ("cp $inptop $tmpfile");
die "script will not overwrite existing output\n" if (-e $outtop);

#get charges
@off=split/,|=/,$offpam;
$key=$off[0];
if (uc($key) eq "FILE") {
  $file=$off[1]; open(CHGFILE,"<",$file);
  while(<CHGFILE>){ ($nam,$charge)=split; $chg{$nam}=$charge;$n++;} #get atom charges from a file 
  print "Get [".$n."] atom charges from [ ".$file." ] file.\n";
} else {
  @total=`offget_charge $offpam $inputoff`;
  for ($j=0;$j<@total;$j++){
    $str=$total[$j]; chomp($str); $str =~ s/^\s+|\s+$//g;    @temp=split /\s+/,$str;
    $nam=$temp[0]; $chg{$nam}=$temp[4];}
} #end get atom charges from off file

#transfer atoms types between charge file and top file
print "Atom types are same as [ $inputoff ].\n" if lc($pattern) eq "no" ;
if ($pattern =~ /type/i) {
  $ind1=index($pattern,"type");
  $pat1=substr $pattern,$ind1;
  $pat1 =~ s/,|:|=/ /g; @file=split /\s+/,$pat1;
  open (PATF,$file[1]);
  while(<PATF>) { ($typ1,$typ2)=split;$chg{$typ1}=$chg{$typ2};}
   print "Atom types are defined from [ $file[1] ].\n"
}  

# parameter position in top file
@top=split(',',$toppam);
$molecule=$top[0]; $section=$top[1]; $pamcol=substr $top[2],3; 
$idx=0;
for ($n=3;$n<@top;$n++) {
  $top[$n]= substr $top[$n],2; @templn=split(/-/,$top[$n]);
  $templn[1]=$templn[0] unless  $templn[1] > $templn[0];
  for ($j=$templn[0];$j<=$templn[1];$j++){ $ln[$idx]=$j; $idx++;"\n";}
}

#update top file.
$nterm=$idx;$idx=0;
for ($i=0;$i<$nterm;$i++){
  $pamln=$ln[$i];
  $temp=`topget_param_moldef  $molecule $section $pamln 2  $inptop`;chomp($temp);$nam=uc($temp) ;#first atom name
  $pam=$chg{$nam}*$unitcov;
  print "$nam    $pam \n";
  system("topupd_moldef $molecule $section $pamln $pamcol $pam  $tmpfile > $tmpfil2; mv $tmpfil2 $tmpfile");
  $idx++;
}
print "Update [ $idx  ] charges for $molecule.[ $section ].\n";
system ("mv $tmpfile $outtop");
