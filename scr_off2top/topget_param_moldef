#!/usr/bin/perl

# topget_param_moldef - Extract parameters from topology molecule definitions
#
# This script extracts specific parameters from molecule definition sections
# within GROMACS topology files, providing precise parameter retrieval.

if (@ARGV < 5 || $ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
    print_help();
    exit(@ARGV < 5 ? 1 : 0);
}

sub print_help {
    print << 'EOF';

NAME
    topget_param_moldef - Extract parameters from topology molecule definitions

PURPOSE
    This script extracts specific parameters from molecule definition sections
    within GROMACS topology files. It locates specific molecules, sections,
    lines, and columns to retrieve individual parameter values with high
    precision for topology manipulation workflows.

USAGE
    topget_param_moldef molecule_name section_name line_number column_number topology.top

PARAMETERS
    molecule_name - Name of molecule in topology file (case-insensitive)
    section_name  - Section within molecule (atoms, bonds, angles, dihedrals)
    line_number   - Line number within section (1-based indexing)
    column_number - Column number within line (1-based indexing)
    topology.top  - Input GROMACS topology file

INPUT
    • GROMACS topology file with [moleculetype] sections
    • Molecule definitions containing various parameter sections
    • Structured format with comment and section handling

OUTPUT
    • Single parameter value to stdout
    • Exact value from specified position
    • Error messages for missing molecules, sections, or lines

DETAILS
    The script works by:
    1. Scanning topology file for [moleculetype] sections
    2. Matching specified molecule name (case-insensitive)
    3. Locating specified section within molecule definition
    4. Counting to specified line number (skipping comments)
    5. Extracting value from specified column
    6. Outputting parameter value to stdout
    
    Comment Handling:
    - Skips lines beginning with ';' (GROMACS comments)
    - Does not count comment lines in line numbering
    - Maintains accurate line indexing for parameter sections
    
    Section Detection:
    - Identifies sections by bracket notation [section_name]
    - Matches section names exactly
    - Stops processing at next section or end of molecule

SUPPORTED SECTIONS
    Common molecule definition sections:
    • atoms: Atomic definitions (type, charge, mass, etc.)
    • bonds: Bond definitions (atom pairs, parameters)
    • angles: Angle definitions (atom triplets, parameters)
    • dihedrals: Dihedral definitions (atom quartets, parameters)
    • pairs: 1-4 pair interactions
    • exclusions: Interaction exclusions
    • constraints: Distance constraints

EXAMPLES
    topget_param_moldef ALA7 atoms 5 2 system.top
        Extract atom type from atom 5 in ALA7 molecule
    
    topget_param_moldef SOL bonds 1 4 system.top
        Extract bond force constant from first bond in SOL molecule
    
    topget_param_moldef MOL angles 10 3 system.top
        Extract angle equilibrium value from angle 10 in MOL molecule

INTEGRATION
    This script integrates with topology manipulation workflows:
    • Used by off2top_* scripts for parameter reading
    • Provides precise parameter extraction for updates
    • Supports parameter comparison and validation
    • Enables selective parameter modifications

ERROR HANDLING
    • Reports missing molecule names
    • Detects absent sections within molecules
    • Identifies line number out of range errors
    • Handles malformed topology files gracefully
    • Provides specific error messages for troubleshooting

TOPOLOGY FILE FORMAT
    Expected GROMACS topology format:
    [moleculetype]
    molecule_name    nrexcl
    
    [atoms]
    ; id  type  resnr resname atom cgnr charge mass
    1     CT    1     MOL     C1   1    0.000  12.01
    
    [bonds]
    ; ai   aj   func   b0      kb
    1      2    1      0.153   334720.0

LINE AND COLUMN INDEXING
    • Line numbers: 1-based indexing (first line = 1)
    • Column numbers: 1-based indexing (first column = 1)
    • Comment lines do not count toward line numbers
    • Empty lines are skipped in counting
    • Section headers do not count as data lines

PRECISION AND FORMATTING
    • Extracts exact parameter values as stored
    • Preserves numerical precision
    • No formatting or unit conversion applied
    • Returns raw parameter values for processing

SAFETY FEATURES
    - Comprehensive error checking for missing elements
    - Graceful handling of malformed topology files
    - Clear error messages for troubleshooting
    - Prevents out-of-bounds access attempts

EOF
}

$bnk="    ";
$molecule=$ARGV[0];shift;$section=$ARGV[0];shift;
$pamln=$ARGV[0];shift;$pamcol=$ARGV[0];shift;
$topfile=$ARGV[0];

open (TOP,$topfile);
while(<TOP>)
{
  $_ =~ s/^\s+//g;
  if ((substr $_, 0, 1) eq ";") {next;}

  if (/moleculetype/) { #find a molecule type
    while(<TOP>) {
      $_ =~ s/^\s+//g;
      if ((substr $_, 0, 1) eq ";") {next;}
      chomp;
      ($mol,$nrexc)=split;

      if ($mol =~ /$molecule/i) { #match the molecule tyep
        while(<TOP>) {
          $_ =~ s/^\s+//g;
          if ((substr $_, 0, 1) eq ";") {next;}

          if (/$section/) {
            for ($i=0;$i<$pamln;$i++) {
              $_=<TOP>;
              $_ =~ s/^\s+//g;
              if ((substr $_, 0, 1) eq ";") {$i--; next; }
           # how to tell the end of the file and give err message.? Sep 26 2019
            #  elsif ( /^\s*$/ ) {die "No line number [ $pamln ] is found in $molecule.[ $section ] !"}
              elsif ((substr $_, 0, 1) eq "\[") {die "No line number [ $pamln ] is found in $molecule.[ $section ] !"}
             # elsif ( /^\s*$|\[/ ) {die "No line number [ $pamln ] is found in $molecule.[ $section ] !"} 
              else { next unless ($i == $pamln -1); }
            }
            chomp;
            @output=split;
            $buf=$output[$pamcol-1];
            print $buf."\n";
            last; #exit the section loop
          } else {
            die "No $section is found in $molecule !" if /moleculetype/;
          }

        }
      } 
      else { last; } #exit the molecule loop 
   } 

  }

} #end  loop
