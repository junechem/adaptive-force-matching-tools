#!/usr/bin/perl
#$dftd3bin="/storage/zhma/razor-scratch/zhma/PROJECT3/PQS_newSettings/templates/fit_D3_functionGroup/dftd3";
#$dftd3bin="/scr/zhma/pqs_new/templates/fit_D3_functionGroup/dftd3";
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== getd3force - D3 Dispersion Force Calculator ===\n\n";
    print "PURPOSE:\n";
    print "  Calculate D3 dispersion forces using the dftd3 program with Becke-Johnson damping.\n";
    print "  Provides Grimme D3 dispersion corrections for quantum chemistry calculations.\n\n";
    print "USAGE:\n";
    print "  getd3force functional file.xyz\n";
    print "  getd3force pbe0 system.xyz\n\n";
    print "PARAMETERS:\n";
    print "  functional - DFT functional name (e.g., 'b3lyp', 'pbe', 'pbe0', 'blyp')\n";
    print "  file.xyz   - XYZ coordinate file in standard format\n\n";
    print "INPUT:\n";
    print "  - XYZ coordinate files in standard format\n";
    print "  - First line must contain only atom count (no extra fields)\n\n";
    print "OUTPUT:\n";
    print "  - Creates file.xyz.d3grad with D3 dispersion gradients\n";
    print "  - Creates file.xyz.eng with D3 dispersion energy\n";
    print "  - Gradients in atomic units (Hartree/Bohr)\n\n";
    print "DETAILS:\n";
    print "  - Uses dftd3 program with Becke-Johnson damping (-bj flag)\n";
    print "  - Improved accuracy compared to standard D3 damping\n";
    print "  - Validates input file format (standard xyz only)\n";
    print "  - Automatically renames gradient output from 'dftd3_gradient'\n";
    print "  - Requires dftd3 binary in PATH\n\n";
    print "SUPPORTED FUNCTIONALS:\n";
    print "  Common functionals: b3lyp, pbe, pbe0, blyp, bp86, tpss, etc.\n";
    print "  See dftd3 documentation for complete list\n\n";
    print "EXAMPLES:\n";
    print "  getd3force b3lyp molecule.xyz     # Creates molecule.xyz.d3grad and molecule.xyz.eng\n";
    print "  getd3force pbe0 system.xyz       # Uses PBE0 functional parameters\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Generate xyz: pxyz_select 4 system.pxyz > qm_atoms.xyz\n";
    print "  2. Calculate D3: getd3force b3lyp qm_atoms.xyz\n";
    print "  3. Add to .ref: ref_upd_d3_grad qm_atoms.xyz.d3grad system.ref > corrected.ref\n\n";
    print "ERROR CHECKING:\n";
    print "  - Validates standard xyz format (atom count only on first line)\n";
    print "  - Dies with error if extra fields detected in header\n";
    print "  - Requires dftd3 binary accessibility\n\n";
    print "SEE ALSO:\n";
    print "  getd2force        - Calculate D2 dispersion corrections\n";
    print "  ref_upd_d3_grad   - Add D3 corrections to .ref files\n";
    print "  dftd3             - Grimme's D3 dispersion program (binary)\n\n";
}

$dftd3bin="dftd3";
$func=$ARGV[0];shift;

$_=`head -1 $ARGV[0]`;
($num,$emp) = split;
die "are you using standard xyz file rather than pqs xyz file.\n" if $emp;

$outputname="$ARGV[0].eng";
$gradientfile="$ARGV[0].grad";
system("$dftd3bin $ARGV[0] -func $func -bj -grad > $outputname"); 
system("mv dftd3_gradient $ARGV[0].d3grad");

