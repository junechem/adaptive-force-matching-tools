#!/usr/bin/perl
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== ref_upd_d3_grad - D3 Dispersion Correction Integration ===\n\n";
    print "PURPOSE:\n";
    print "  Add D3 dispersion corrections to existing .ref files.\n";
    print "  Essential for including Grimme D3 dispersion corrections in AFMTools workflows.\n\n";
    print "USAGE:\n";
    print "  ref_upd_d3_grad d3_gradients_file [file.ref]\n";
    print "  ref_upd_d3_grad system.d3grad forces.ref > corrected.ref\n\n";
    print "PARAMETERS:\n";
    print "  d3_gradients_file - D3 gradients file (from getd3force)\n";
    print "  file.ref         - Existing .ref file (optional, reads from stdin if not provided)\n\n";
    print "INPUT:\n";
    print "  - D3 gradients file (from getd3force or getd2force)\n";
    print "  - Existing .ref file with coordinates and current forces\n\n";
    print "OUTPUT:\n";
    print "  - Updated .ref file with dispersion corrections added to stdout\n\n";
    print "DETAILS:\n";
    print "  - Adds Grimme D3 dispersion corrections to existing forces\n";
    print "  - Converts gradients to forces (gradients have opposite sign)\n";
    print "  - Unit conversion: -627.5095/0.529177 (Hartree/Bohr → kcal/mol/Å)\n";
    print "  - Preserves NetF and Torq entries unchanged\n";
    print "  - Processes atoms sequentially in file order\n\n";
    print "UNIT CONVERSION:\n";
    print "  - D3 gradients in Hartree/Bohr\n";
    print "  - Output forces in kcal/mol/Å\n";
    print "  - Conversion factor: -627.5095/0.529177\n";
    print "  - Negative sign converts gradients to forces\n\n";
    print "D3 GRADIENTS FILE:\n";
    print "  - Generated by getd3force or getd2force scripts\n";
    print "  - Contains three gradient components per atom\n";
    print "  - Format: gx gy gz (one line per atom)\n";
    print "  - Units: Hartree/Bohr\n\n";
    print "EXAMPLES:\n";
    print "  getd3force b3lyp system.xyz && ref_upd_d3_grad system.xyz.d3grad forces.ref > corrected.ref\n";
    print "  ref_upd_d3_grad dispersion.d3grad step2.ref > step3.ref\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Generate initial: ref_gen_step1_cord molinfo coords.xyz > step1.ref\n";
    print "  2. Add QM forces: ref_upd_orca_grad molecule.engrad step1.ref > step2.ref\n";
    print "  3. Calculate D3: getd3force b3lyp system.xyz\n";
    print "  4. Add D3 corrections: ref_upd_d3_grad system.xyz.d3grad step2.ref > step3.ref\n";
    print "  5. Calculate net: ref_upd_net step3.ref > final.ref\n\n";
    print "SEE ALSO:\n";
    print "  getd3force         - Calculate D3 dispersion corrections\n";
    print "  getd2force         - Calculate D2 dispersion corrections\n";
    print "  ref_upd_d3_frc     - Alternative D3 integration script\n";
    print "  ref_upd_net        - Calculate net forces and torques\n\n";
}

$conv=-627.5095/0.529177;
$bnk="     ";

open(PQSG,"$ARGV[0]") || die "can not open $ARGV[0]\n";
shift;

#$_=<PQSG>;

$i=0;
while(<PQSG>){
($fxx[$i],$fyy[$i],$fzz[$i]) = split;
$i++;
}

$_=<>;print;
$_=<>;print;
$i=0;
while(<>)
{
($nam,$xxx,$yyy,$zzz, $frx, $fry, $frz, $solv, $molnam)=split;
unless (($nam eq "NetF") | ($nam eq "Torq")){

print $nam.$bnk.$xxx.$bnk.$yyy.$bnk.$zzz.$bnk;
printf "%12.7f$bnk%12.7f$bnk%12.7f",$frx+$fxx[$i]*$conv,$fry+$fyy[$i]*$conv,$frz+$fzz[$i]*$conv;
print $bnk.$solv.$bnk.$molind.$molnam."\n";

$i++;
}
else { print;}

}



