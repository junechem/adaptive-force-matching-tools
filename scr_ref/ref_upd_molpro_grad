#!/usr/bin/perl
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== ref_upd_molpro_grad - Molpro Gradient Integration ===\n\n";
    print "PURPOSE:\n";
    print "  Add Molpro gradients to existing .ref files.\n";
    print "  Essential for integrating Molpro QM gradients into AFMTools workflows.\n\n";
    print "USAGE:\n";
    print "  ref_upd_molpro_grad molpro_gradients_file [file.ref]\n";
    print "  ref_upd_molpro_grad gradients.dat system.ref > updated.ref\n\n";
    print "PARAMETERS:\n";
    print "  molpro_gradients_file - Molpro gradients file (from molpro_extract_grad)\n";
    print "  file.ref             - Existing .ref file (optional, reads from stdin if not provided)\n\n";
    print "INPUT:\n";
    print "  - Molpro gradients file with gradient data\n";
    print "  - Existing .ref file with coordinates and current forces\n\n";
    print "OUTPUT:\n";
    print "  - Updated .ref file with Molpro gradient contributions added to stdout\n";
    print "  - Forces converted from gradients using proper unit conversion\n\n";
    print "DETAILS:\n";
    print "  - Converts gradients to forces (gradients have opposite sign)\n";
    print "  - Unit conversion: -627.5095/0.5291772083 (Hartree/Bohr → kcal/mol/Å)\n";
    print "  - Adds Molpro contributions to existing forces in .ref file\n";
    print "  - Preserves NetF and Torq entries unchanged\n";
    print "  - Processes atoms sequentially in file order\n";
    print "  - Handles 'end' markers in Molpro gradient files\n\n";
    print "UNIT CONVERSION:\n";
    print "  - Molpro gradients in Hartree/Bohr\n";
    print "  - Output forces in kcal/mol/Å\n";
    print "  - Conversion factor: -627.5095/0.5291772083\n";
    print "  - Negative sign converts gradients to forces\n\n";
    print "EXAMPLES:\n";
    print "  molpro_extract_grad calculation.out | ref_upd_molpro_grad /dev/stdin system.ref > updated.ref\n";
    print "  ref_upd_molpro_grad gradients.dat step1.ref > step2.ref\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Generate initial: ref_gen_step1_cord molinfo coords.xyz > step1.ref\n";
    print "  2. Extract gradients: molpro_extract_grad molpro.out > gradients.dat\n";
    print "  3. Add gradients: ref_upd_molpro_grad gradients.dat step1.ref > step2.ref\n";
    print "  4. Calculate net: ref_upd_net step2.ref > final.ref\n\n";
    print "SEE ALSO:\n";
    print "  molpro_extract_grad - Extract gradients from Molpro output\n";
    print "  ref_upd_net         - Calculate net forces and torques\n";
    print "  ref_gen_step1_cord  - Generate initial .ref files\n\n";
}

$conv=-627.5095/0.5291772083;
$bnk="     ";

open(PQSG,"$ARGV[0]") || die "can not open $ARGV[0]\n";
shift;

$i=0;
while(<PQSG>){
($fxx[$i],$fyy[$i],$fzz[$i]) = split;
$i++;
}
# the last line is "end"; the script assumes these non-numbers convert to 0.0;

$_=<>;print;
$_=<>;print;
$i=0;
while(<>)
{
($nam,$xxx,$yyy,$zzz, $frx, $fry, $frz, $solv, $molnam)=split;
unless (($nam eq "NetF") | ($nam eq "Torq")){

print $nam.$bnk.$xxx.$bnk.$yyy.$bnk.$zzz.$bnk;
printf "%12.7f$bnk%12.7f$bnk%12.7f",$frx+$fxx[$i]*$conv,$fry+$fyy[$i]*$conv,$frz+$fzz[$i]*$conv;
print $bnk.$solv.$bnk.$molind.$molnam."\n";

$i++;
}
else { print;}

}



