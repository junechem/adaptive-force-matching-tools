#!/usr/bin/perl
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== ref_upd_net - Net Force and Torque Calculator ===\n\n";
    print "PURPOSE:\n";
    print "  Calculate net forces and torques for molecules in .ref files.\n";
    print "  Essential for analyzing molecular motion and rotational dynamics.\n\n";
    print "USAGE:\n";
    print "  ref_upd_net [file.ref]\n";
    print "  ref_upd_net final_forces.ref > analyzed.ref\n\n";
    print "PARAMETERS:\n";
    print "  file.ref - .ref file with atomic forces (optional, reads from stdin if not provided)\n\n";
    print "INPUT:\n";
    print "  - .ref file with atomic forces already calculated\n";
    print "  - Must contain existing NetF and Torq entry placeholders\n\n";
    print "OUTPUT:\n";
    print "  - Updated .ref file with calculated NetF and Torq entries to stdout\n";
    print "  - Net forces and torques replace existing placeholder values\n\n";
    print "DETAILS:\n";
    print "  - Sums atomic forces for each molecule to calculate net force\n";
    print "  - Calculates torque around center of mass using: τ = r × F\n";
    print "  - Updates NetF and Torq entries in .ref file with calculated values\n";
    print "  - Preserves all atomic force data unchanged\n";
    print "  - Processes molecules sequentially based on NetF/Torq markers\n\n";
    print "CALCULATIONS:\n";
    print "  Net Force: Σ(atomic forces) for each molecule\n";
    print "  - fnx = Σ(frx), fny = Σ(fry), fnz = Σ(frz)\n";
    print "  \n";
    print "  Torque: Σ(r_i - r_COM) × F_i, where r_COM is center of mass\n";
    print "  - tqx = Σ[(y_i - coy) × frz_i - (z_i - coz) × fry_i]\n";
    print "  - tqy = Σ[(z_i - coz) × frx_i - (x_i - cox) × frz_i]\n";
    print "  - tqz = Σ[(x_i - cox) × fry_i - (y_i - coy) × frx_i]\n\n";
    print "MOLECULAR PROCESSING:\n";
    print "  - Processes atoms between consecutive NetF entries\n";
    print "  - Uses existing Torq entry coordinates as center of mass\n";
    print "  - Calculates forces and torques for each complete molecule\n";
    print "  - Maintains molecular boundaries from original .ref structure\n\n";
    print "EXAMPLES:\n";
    print "  ref_upd_net final_forces.ref > analyzed.ref\n";
    print "  cat system.ref | ref_upd_net > net_forces.ref\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Generate initial: ref_gen_step1_cord molinfo coords.xyz > step1.ref\n";
    print "  2. Add QM forces: ref_upd_orca_grad molecule.engrad step1.ref > step2.ref\n";
    print "  3. Calculate net: ref_upd_net step2.ref > final.ref\n";
    print "  4. Analyze results: grep 'NetF\\|Torq' final.ref\n\n";
    print "OUTPUT FORMAT:\n";
    print "  NetF entries: NetF cox coy coz fnx fny fnz solvflag molID\n";
    print "  Torq entries: Torq cox coy coz tqx tqy tqz solvflag molID\n";
    print "  - Coordinates (cox,coy,coz) represent center of mass\n";
    print "  - Forces and torques in kcal/mol/Å units\n\n";
    print "APPLICATIONS:\n";
    print "  - Analyze net forces on molecules for equilibrium checks\n";
    print "  - Calculate rotational motion from torque components\n";
    print "  - Validate force calculations (net forces should be small)\n";
    print "  - Prepare data for molecular dynamics analysis\n\n";
    print "SEE ALSO:\n";
    print "  ref_gen_step1_cord - Generate initial .ref files with NetF/Torq placeholders\n";
    print "  ref_upd_* scripts  - Add forces from various sources before calculating net\n\n";
}


$bnk="     ";

$_=<>;print;
$_=<>;print;
$i=0;

while(<>)
{

($nam,$xxx[$i],$yyy[$i],$zzz[$i], $frx[$i], $fry[$i], $frz[$i],$solv,$molnam)=split;

if ($nam eq "NetF") {
$natm=$i; $i=-1;
$fnx=0.0;$fny=0.0;$fnz=0.0;
$tqx=0.0;$tqy=0.0;$tqz=0.0;
$_=<>;
($nam,$cox,$coy,$coz)=split;

for ($j=0;$j<$natm;$j++)
{
$fnx+=$frx[$j];$fny+=$fry[$j];$fnz+=$frz[$j];
$tqx+=($yyy[$j]-$coy)*$frz[$j]-($zzz[$j]-$coz)*$fry[$j];
$tqy+=($zzz[$j]-$coz)*$frx[$j]-($xxx[$j]-$cox)*$frz[$j];
$tqz+=($xxx[$j]-$cox)*$fry[$j]-($yyy[$j]-$coy)*$frx[$j];
}

print "NetF$bnk$xxx[$j]$bnk$yyy[$j]$bnk$zzz[$j]$bnk";
printf "%12.7f$bnk%12.7f$bnk%12.7f",$fnx,$fny,$fnz;
print $bnk.$solv.$bnk.$molind.$molnam."\n";

print "Torq$bnk$cox$bnk$coy$bnk$coz$bnk";
printf "%12.7f$bnk%12.7f$bnk%12.7f",$tqx,$tqy,$tqz;
print $bnk.$solv.$bnk.$molind.$molnam."\n";

}
else{ print;};

$i++;

}



