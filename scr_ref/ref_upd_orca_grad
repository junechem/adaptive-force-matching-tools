#!/usr/bin/perl
if( $ARGV[0] eq '-h' || $ARGV[0] eq '-help' || $ARGV[0] eq '--help')
{
help();
exit;
}
sub help {
    print "\n=== ref_upd_orca_grad - ORCA Gradient Integration ===\n\n";
    print "PURPOSE:\n";
    print "  Add ORCA gradients from .engrad files to existing .ref files.\n";
    print "  Essential for integrating ORCA QM forces into AFMTools workflows.\n\n";
    print "USAGE:\n";
    print "  ref_upd_orca_grad molecule.engrad [file.ref]\n";
    print "  ref_upd_orca_grad MyMol.engrad system.ref > updated.ref\n\n";
    print "PARAMETERS:\n";
    print "  molecule.engrad - ORCA .engrad file (gradient file generated by ORCA)\n";
    print "  file.ref        - Existing .ref file (optional, reads from stdin if not provided)\n\n";
    print "INPUT:\n";
    print "  - ORCA .engrad file with gradient information\n";
    print "  - Existing .ref file with coordinates and current forces\n\n";
    print "OUTPUT:\n";
    print "  - Updated .ref file with ORCA gradient contributions added to stdout\n";
    print "  - Forces converted from gradients using proper unit conversion\n\n";
    print "DETAILS:\n";
    print "  - Parses ORCA .engrad file format automatically\n";
    print "  - Converts gradients to forces (gradients have opposite sign)\n";
    print "  - Unit conversion: -627.5095/0.5291772083 (Hartree/Bohr → kcal/mol/Å)\n";
    print "  - Adds ORCA contributions to existing forces in .ref file\n";
    print "  - Preserves NetF and Torq entries unchanged\n";
    print "  - Processes atoms sequentially in file order\n\n";
    print "UNIT CONVERSION:\n";
    print "  - ORCA gradients in Hartree/Bohr\n";
    print "  - Output forces in kcal/mol/Å\n";
    print "  - Conversion factor: -627.5095/0.5291772083\n";
    print "  - Negative sign converts gradients to forces\n\n";
    print "ENGRAD FILE FORMAT:\n";
    print "  - ORCA's standard gradient file format\n";
    print "  - Contains header information and gradient data\n";
    print "  - Three gradients per atom (x, y, z components)\n";
    print "  - Automatically parsed by script\n\n";
    print "EXAMPLES:\n";
    print "  ref_upd_orca_grad molecule.engrad system.ref > updated.ref\n";
    print "  cat initial.ref | ref_upd_orca_grad qm_calc.engrad > final.ref\n\n";
    print "TYPICAL WORKFLOW:\n";
    print "  1. Generate initial: ref_gen_step1_cord molinfo coords.xyz > step1.ref\n";
    print "  2. Add ORCA forces: ref_upd_orca_grad molecule.engrad step1.ref > step2.ref\n";
    print "  3. Calculate net: ref_upd_net step2.ref > final.ref\n\n";
    print "ERROR HANDLING:\n";
    print "  - Dies if .engrad file cannot be opened\n";
    print "  - Expects specific .engrad file format\n";
    print "  - Atom count must match between .engrad and .ref files\n\n";
    print "SEE ALSO:\n";
    print "  orca_extract_grad - Extract gradients from ORCA output\n";
    print "  ref_upd_net       - Calculate net forces and torques\n";
    print "  ref_gen_step1_cord - Generate initial .ref files\n\n";
}

$conv=-627.5095/0.5291772083;
$bnk="     ";

open(engrad,"$ARGV[0]") || die "can not open $ARGV[0]\n";shift;
#take tempref file as <>;

do ($_=<engrad>) until ($.>2);  # skip the header
$natms=<engrad>; chomp($natms);
do ($_=<engrad>) until ($.>10); #skip the header

$i=0;
while(<engrad>){
chomp;
$gxx[$i]=$_;
$_=<engrad>; chomp; $gyy[$i]=$_;
$_=<engrad>; chomp; $gzz[$i]=$_;
$i++;
last if $natms==$i;
}

$_=<>;print;
$_=<>;print;
$i=0;
while(<>)
{
($nam,$xxx,$yyy,$zzz, $frx, $fry, $frz, $solv, $molnam)=split;
unless (($nam eq "NetF") | ($nam eq "Torq")){

print $nam.$bnk.$xxx.$bnk.$yyy.$bnk.$zzz.$bnk;
print $frx+$gxx[$i]*$conv,$bnk,$fry+$gyy[$i]*$conv,$bnk, $frz+$gzz[$i]*$conv,$bnk;
print $bnk.$solv.$bnk.$molind.$molnam."\n";

$i++;
}
else { print;}

}



